plugins {
    id 'java'
    id "com.gradleup.shadow" version "8.3.6"
}

tasks.shadowJar {
    archiveClassifier.set('')
    relocate("dev.triumphteam.gui", "dev.triumphteam.gui")
    relocate 'net.objecthunter.exp4j', 'org.leralix.tan.libs.exp4j'
    relocate 'org.bstats', 'org.leralix.tan.bstat'
    relocate 'com.mysql', 'org.leralix.shadow.mysql'
}

group = 'org.tan'
version = '0.16.0'

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "spigot-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "placeholderapi"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "placeholderapi"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = 'minecraft-repo'
        url = 'https://libraries.minecraft.net/'
    }
    maven {
        url 'https://repo.dmulloy2.net/repository/public/'
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'WorldGuard'
        url = "https://maven.enginehub.org/repo/"
    }

    maven { url 'https://jitpack.io' } //Vault
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven {
        name = 'mockbukkit'
        url 'https://repo.papermc.io/repository/maven-public/'
    }

}

dependencies {
    compileOnly 'io.github.leralix:sphere-lib:0.6.0'
    compileOnly 'io.papermc.paper:paper-api:1.20-R0.1-SNAPSHOT'
    compileOnly 'com.mojang:authlib:4.0.43'
    compileOnly 'net.luckperms:api:5.4'
    compileOnly "com.github.MilkBowl:VaultAPI:1.7.1"
    compileOnly 'me.clip:placeholderapi:2.11.5'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'
    implementation 'io.github.leralix:tan-api:0.5.5'
    implementation 'org.bstats:bstats-bukkit:3.1.0'
    implementation 'net.objecthunter:exp4j:0.4.8'
    implementation("dev.triumphteam:triumph-gui:3.1.11")
    //Database dependencies
    implementation 'com.mysql:mysql-connector-j:8.4.0'
    implementation 'org.xerial:sqlite-jdbc:3.43.2.0'

    testImplementation 'io.github.leralix:sphere-lib:0.6.0'
    testImplementation 'com.github.MockBukkit:MockBukkit:v4.72.9'
    testImplementation 'io.papermc.paper:paper-api:1.20-R0.1-SNAPSHOT'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
    testImplementation 'me.clip:placeholderapi:2.11.5'
    testImplementation 'org.xerial:sqlite-jdbc:3.43.2.0'
}

configurations.all {
    resolutionStrategy {
        force 'org.junit.platform:junit-platform-engine:1.10.0'
        force 'org.junit.platform:junit-platform-launcher:1.10.0'
        force 'org.junit.jupiter:junit-jupiter-api:5.10.0'
        force 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

